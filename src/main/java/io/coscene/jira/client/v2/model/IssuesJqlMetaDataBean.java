/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v2.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import io.coscene.jira.client.v2.JSON;

/**
 * The description of the page of issues loaded by the provided JQL query.
 */
@ApiModel(description = "The description of the page of issues loaded by the provided JQL query.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-01T09:11:13.378435+08:00[Asia/Shanghai]")
public class IssuesJqlMetaDataBean {
  public static final String SERIALIZED_NAME_START_AT = "startAt";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private Long startAt;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "totalCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public static final String SERIALIZED_NAME_VALIDATION_WARNINGS = "validationWarnings";
  @SerializedName(SERIALIZED_NAME_VALIDATION_WARNINGS)
  private List<String> validationWarnings = null;

  public IssuesJqlMetaDataBean() {
  }

  public IssuesJqlMetaDataBean startAt(Long startAt) {
    
    this.startAt = startAt;
    return this;
  }

   /**
   * The index of the first issue.
   * @return startAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The index of the first issue.")

  public Long getStartAt() {
    return startAt;
  }


  public void setStartAt(Long startAt) {
    this.startAt = startAt;
  }


  public IssuesJqlMetaDataBean maxResults(Integer maxResults) {
    
    this.maxResults = maxResults;
    return this;
  }

   /**
   * The maximum number of issues that could be loaded in this evaluation.
   * @return maxResults
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The maximum number of issues that could be loaded in this evaluation.")

  public Integer getMaxResults() {
    return maxResults;
  }


  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public IssuesJqlMetaDataBean count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * The number of issues that were loaded in this evaluation.
   * @return count
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of issues that were loaded in this evaluation.")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public IssuesJqlMetaDataBean totalCount(Long totalCount) {
    
    this.totalCount = totalCount;
    return this;
  }

   /**
   * The total number of issues the JQL returned.
   * @return totalCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The total number of issues the JQL returned.")

  public Long getTotalCount() {
    return totalCount;
  }


  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }


  public IssuesJqlMetaDataBean validationWarnings(List<String> validationWarnings) {
    
    this.validationWarnings = validationWarnings;
    return this;
  }

  public IssuesJqlMetaDataBean addValidationWarningsItem(String validationWarningsItem) {
    if (this.validationWarnings == null) {
      this.validationWarnings = new ArrayList<>();
    }
    this.validationWarnings.add(validationWarningsItem);
    return this;
  }

   /**
   * Any warnings related to the JQL query. Present only if the validation mode was set to &#x60;warn&#x60;.
   * @return validationWarnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.")

  public List<String> getValidationWarnings() {
    return validationWarnings;
  }


  public void setValidationWarnings(List<String> validationWarnings) {
    this.validationWarnings = validationWarnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuesJqlMetaDataBean issuesJqlMetaDataBean = (IssuesJqlMetaDataBean) o;
    return Objects.equals(this.startAt, issuesJqlMetaDataBean.startAt) &&
        Objects.equals(this.maxResults, issuesJqlMetaDataBean.maxResults) &&
        Objects.equals(this.count, issuesJqlMetaDataBean.count) &&
        Objects.equals(this.totalCount, issuesJqlMetaDataBean.totalCount) &&
        Objects.equals(this.validationWarnings, issuesJqlMetaDataBean.validationWarnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startAt, maxResults, count, totalCount, validationWarnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuesJqlMetaDataBean {\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    validationWarnings: ").append(toIndentedString(validationWarnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startAt");
    openapiFields.add("maxResults");
    openapiFields.add("count");
    openapiFields.add("totalCount");
    openapiFields.add("validationWarnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startAt");
    openapiRequiredFields.add("maxResults");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("totalCount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IssuesJqlMetaDataBean
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IssuesJqlMetaDataBean.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssuesJqlMetaDataBean is not found in the empty JSON string", IssuesJqlMetaDataBean.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IssuesJqlMetaDataBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssuesJqlMetaDataBean` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IssuesJqlMetaDataBean.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("validationWarnings") != null && !jsonObj.get("validationWarnings").isJsonNull()) && !jsonObj.get("validationWarnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationWarnings` to be an array in the JSON string but got `%s`", jsonObj.get("validationWarnings").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssuesJqlMetaDataBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssuesJqlMetaDataBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssuesJqlMetaDataBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssuesJqlMetaDataBean.class));

       return (TypeAdapter<T>) new TypeAdapter<IssuesJqlMetaDataBean>() {
           @Override
           public void write(JsonWriter out, IssuesJqlMetaDataBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssuesJqlMetaDataBean read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IssuesJqlMetaDataBean given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IssuesJqlMetaDataBean
  * @throws IOException if the JSON string is invalid with respect to IssuesJqlMetaDataBean
  */
  public static IssuesJqlMetaDataBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssuesJqlMetaDataBean.class);
  }

 /**
  * Convert an instance of IssuesJqlMetaDataBean to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

