/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v2.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import io.coscene.jira.client.v2.JSON;

/**
 * JQL queries that contained users that could not be found
 */
@ApiModel(description = "JQL queries that contained users that could not be found")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-01T09:11:13.378435+08:00[Asia/Shanghai]")
public class JQLQueryWithUnknownUsers {
  public static final String SERIALIZED_NAME_ORIGINAL_QUERY = "originalQuery";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_QUERY)
  private String originalQuery;

  public static final String SERIALIZED_NAME_CONVERTED_QUERY = "convertedQuery";
  @SerializedName(SERIALIZED_NAME_CONVERTED_QUERY)
  private String convertedQuery;

  public JQLQueryWithUnknownUsers() {
  }

  public JQLQueryWithUnknownUsers originalQuery(String originalQuery) {
    
    this.originalQuery = originalQuery;
    return this;
  }

   /**
   * The original query, for reference
   * @return originalQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original query, for reference")

  public String getOriginalQuery() {
    return originalQuery;
  }


  public void setOriginalQuery(String originalQuery) {
    this.originalQuery = originalQuery;
  }


  public JQLQueryWithUnknownUsers convertedQuery(String convertedQuery) {
    
    this.convertedQuery = convertedQuery;
    return this;
  }

   /**
   * The converted query, with accountIDs instead of user identifiers, or &#39;unknown&#39; for users that could not be found
   * @return convertedQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found")

  public String getConvertedQuery() {
    return convertedQuery;
  }


  public void setConvertedQuery(String convertedQuery) {
    this.convertedQuery = convertedQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JQLQueryWithUnknownUsers jqLQueryWithUnknownUsers = (JQLQueryWithUnknownUsers) o;
    return Objects.equals(this.originalQuery, jqLQueryWithUnknownUsers.originalQuery) &&
        Objects.equals(this.convertedQuery, jqLQueryWithUnknownUsers.convertedQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originalQuery, convertedQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JQLQueryWithUnknownUsers {\n");
    sb.append("    originalQuery: ").append(toIndentedString(originalQuery)).append("\n");
    sb.append("    convertedQuery: ").append(toIndentedString(convertedQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("originalQuery");
    openapiFields.add("convertedQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JQLQueryWithUnknownUsers
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (JQLQueryWithUnknownUsers.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in JQLQueryWithUnknownUsers is not found in the empty JSON string", JQLQueryWithUnknownUsers.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JQLQueryWithUnknownUsers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JQLQueryWithUnknownUsers` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("originalQuery") != null && !jsonObj.get("originalQuery").isJsonNull()) && !jsonObj.get("originalQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalQuery").toString()));
      }
      if ((jsonObj.get("convertedQuery") != null && !jsonObj.get("convertedQuery").isJsonNull()) && !jsonObj.get("convertedQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convertedQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convertedQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JQLQueryWithUnknownUsers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JQLQueryWithUnknownUsers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JQLQueryWithUnknownUsers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JQLQueryWithUnknownUsers.class));

       return (TypeAdapter<T>) new TypeAdapter<JQLQueryWithUnknownUsers>() {
           @Override
           public void write(JsonWriter out, JQLQueryWithUnknownUsers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JQLQueryWithUnknownUsers read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JQLQueryWithUnknownUsers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JQLQueryWithUnknownUsers
  * @throws IOException if the JSON string is invalid with respect to JQLQueryWithUnknownUsers
  */
  public static JQLQueryWithUnknownUsers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JQLQueryWithUnknownUsers.class);
  }

 /**
  * Convert an instance of JQLQueryWithUnknownUsers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

