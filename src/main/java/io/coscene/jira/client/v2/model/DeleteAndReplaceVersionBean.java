/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v2.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import io.coscene.jira.client.v2.JSON;

/**
 * DeleteAndReplaceVersionBean
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-01T09:11:13.378435+08:00[Asia/Shanghai]")
public class DeleteAndReplaceVersionBean {
  public static final String SERIALIZED_NAME_MOVE_FIX_ISSUES_TO = "moveFixIssuesTo";
  @SerializedName(SERIALIZED_NAME_MOVE_FIX_ISSUES_TO)
  private Long moveFixIssuesTo;

  public static final String SERIALIZED_NAME_MOVE_AFFECTED_ISSUES_TO = "moveAffectedIssuesTo";
  @SerializedName(SERIALIZED_NAME_MOVE_AFFECTED_ISSUES_TO)
  private Long moveAffectedIssuesTo;

  public static final String SERIALIZED_NAME_CUSTOM_FIELD_REPLACEMENT_LIST = "customFieldReplacementList";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELD_REPLACEMENT_LIST)
  private List<CustomFieldReplacement> customFieldReplacementList = null;

  public DeleteAndReplaceVersionBean() {
  }

  public DeleteAndReplaceVersionBean moveFixIssuesTo(Long moveFixIssuesTo) {
    
    this.moveFixIssuesTo = moveFixIssuesTo;
    return this;
  }

   /**
   * The ID of the version to update &#x60;fixVersion&#x60; to when the field contains the deleted version.
   * @return moveFixIssuesTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the version to update `fixVersion` to when the field contains the deleted version.")

  public Long getMoveFixIssuesTo() {
    return moveFixIssuesTo;
  }


  public void setMoveFixIssuesTo(Long moveFixIssuesTo) {
    this.moveFixIssuesTo = moveFixIssuesTo;
  }


  public DeleteAndReplaceVersionBean moveAffectedIssuesTo(Long moveAffectedIssuesTo) {
    
    this.moveAffectedIssuesTo = moveAffectedIssuesTo;
    return this;
  }

   /**
   * The ID of the version to update &#x60;affectedVersion&#x60; to when the field contains the deleted version.
   * @return moveAffectedIssuesTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the version to update `affectedVersion` to when the field contains the deleted version.")

  public Long getMoveAffectedIssuesTo() {
    return moveAffectedIssuesTo;
  }


  public void setMoveAffectedIssuesTo(Long moveAffectedIssuesTo) {
    this.moveAffectedIssuesTo = moveAffectedIssuesTo;
  }


  public DeleteAndReplaceVersionBean customFieldReplacementList(List<CustomFieldReplacement> customFieldReplacementList) {
    
    this.customFieldReplacementList = customFieldReplacementList;
    return this;
  }

  public DeleteAndReplaceVersionBean addCustomFieldReplacementListItem(CustomFieldReplacement customFieldReplacementListItem) {
    if (this.customFieldReplacementList == null) {
      this.customFieldReplacementList = new ArrayList<>();
    }
    this.customFieldReplacementList.add(customFieldReplacementListItem);
    return this;
  }

   /**
   * An array of custom field IDs (&#x60;customFieldId&#x60;) and version IDs (&#x60;moveTo&#x60;) to update when the fields contain the deleted version.
   * @return customFieldReplacementList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.")

  public List<CustomFieldReplacement> getCustomFieldReplacementList() {
    return customFieldReplacementList;
  }


  public void setCustomFieldReplacementList(List<CustomFieldReplacement> customFieldReplacementList) {
    this.customFieldReplacementList = customFieldReplacementList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteAndReplaceVersionBean deleteAndReplaceVersionBean = (DeleteAndReplaceVersionBean) o;
    return Objects.equals(this.moveFixIssuesTo, deleteAndReplaceVersionBean.moveFixIssuesTo) &&
        Objects.equals(this.moveAffectedIssuesTo, deleteAndReplaceVersionBean.moveAffectedIssuesTo) &&
        Objects.equals(this.customFieldReplacementList, deleteAndReplaceVersionBean.customFieldReplacementList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(moveFixIssuesTo, moveAffectedIssuesTo, customFieldReplacementList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteAndReplaceVersionBean {\n");
    sb.append("    moveFixIssuesTo: ").append(toIndentedString(moveFixIssuesTo)).append("\n");
    sb.append("    moveAffectedIssuesTo: ").append(toIndentedString(moveAffectedIssuesTo)).append("\n");
    sb.append("    customFieldReplacementList: ").append(toIndentedString(customFieldReplacementList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("moveFixIssuesTo");
    openapiFields.add("moveAffectedIssuesTo");
    openapiFields.add("customFieldReplacementList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeleteAndReplaceVersionBean
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DeleteAndReplaceVersionBean.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteAndReplaceVersionBean is not found in the empty JSON string", DeleteAndReplaceVersionBean.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeleteAndReplaceVersionBean.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteAndReplaceVersionBean` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("customFieldReplacementList") != null && !jsonObj.get("customFieldReplacementList").isJsonNull()) {
        JsonArray jsonArraycustomFieldReplacementList = jsonObj.getAsJsonArray("customFieldReplacementList");
        if (jsonArraycustomFieldReplacementList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customFieldReplacementList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customFieldReplacementList` to be an array in the JSON string but got `%s`", jsonObj.get("customFieldReplacementList").toString()));
          }

          // validate the optional field `customFieldReplacementList` (array)
          for (int i = 0; i < jsonArraycustomFieldReplacementList.size(); i++) {
            CustomFieldReplacement.validateJsonObject(jsonArraycustomFieldReplacementList.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteAndReplaceVersionBean.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteAndReplaceVersionBean' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteAndReplaceVersionBean> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteAndReplaceVersionBean.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteAndReplaceVersionBean>() {
           @Override
           public void write(JsonWriter out, DeleteAndReplaceVersionBean value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteAndReplaceVersionBean read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeleteAndReplaceVersionBean given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeleteAndReplaceVersionBean
  * @throws IOException if the JSON string is invalid with respect to DeleteAndReplaceVersionBean
  */
  public static DeleteAndReplaceVersionBean fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteAndReplaceVersionBean.class);
  }

 /**
  * Convert an instance of DeleteAndReplaceVersionBean to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

