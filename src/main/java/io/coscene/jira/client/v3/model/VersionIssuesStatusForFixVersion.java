/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v3.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import io.coscene.jira.client.v3.JSON;

/**
 * If the expand option &#x60;issuesstatus&#x60; is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
 */
@ApiModel(description = "If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T17:36:49.012380+08:00[Asia/Shanghai]")
public class VersionIssuesStatusForFixVersion {
  public static final String SERIALIZED_NAME_UNMAPPED = "unmapped";
  @SerializedName(SERIALIZED_NAME_UNMAPPED)
  private Long unmapped;

  public static final String SERIALIZED_NAME_TO_DO = "toDo";
  @SerializedName(SERIALIZED_NAME_TO_DO)
  private Long toDo;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "inProgress";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  private Long inProgress;

  public static final String SERIALIZED_NAME_DONE = "done";
  @SerializedName(SERIALIZED_NAME_DONE)
  private Long done;

  public VersionIssuesStatusForFixVersion() {
  }

  
  public VersionIssuesStatusForFixVersion(
     Long unmapped, 
     Long toDo, 
     Long inProgress, 
     Long done
  ) {
    this();
    this.unmapped = unmapped;
    this.toDo = toDo;
    this.inProgress = inProgress;
    this.done = done;
  }

   /**
   * Count of issues with a status other than *to do*, *in progress*, and *done*.
   * @return unmapped
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of issues with a status other than *to do*, *in progress*, and *done*.")

  public Long getUnmapped() {
    return unmapped;
  }




   /**
   * Count of issues with status *to do*.
   * @return toDo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of issues with status *to do*.")

  public Long getToDo() {
    return toDo;
  }




   /**
   * Count of issues with status *in progress*.
   * @return inProgress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of issues with status *in progress*.")

  public Long getInProgress() {
    return inProgress;
  }




   /**
   * Count of issues with status *done*.
   * @return done
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of issues with status *done*.")

  public Long getDone() {
    return done;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionIssuesStatusForFixVersion versionIssuesStatusForFixVersion = (VersionIssuesStatusForFixVersion) o;
    return Objects.equals(this.unmapped, versionIssuesStatusForFixVersion.unmapped) &&
        Objects.equals(this.toDo, versionIssuesStatusForFixVersion.toDo) &&
        Objects.equals(this.inProgress, versionIssuesStatusForFixVersion.inProgress) &&
        Objects.equals(this.done, versionIssuesStatusForFixVersion.done);
  }

  @Override
  public int hashCode() {
    return Objects.hash(unmapped, toDo, inProgress, done);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionIssuesStatusForFixVersion {\n");
    sb.append("    unmapped: ").append(toIndentedString(unmapped)).append("\n");
    sb.append("    toDo: ").append(toIndentedString(toDo)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    done: ").append(toIndentedString(done)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unmapped");
    openapiFields.add("toDo");
    openapiFields.add("inProgress");
    openapiFields.add("done");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VersionIssuesStatusForFixVersion
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (VersionIssuesStatusForFixVersion.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionIssuesStatusForFixVersion is not found in the empty JSON string", VersionIssuesStatusForFixVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VersionIssuesStatusForFixVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionIssuesStatusForFixVersion` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionIssuesStatusForFixVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionIssuesStatusForFixVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionIssuesStatusForFixVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionIssuesStatusForFixVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionIssuesStatusForFixVersion>() {
           @Override
           public void write(JsonWriter out, VersionIssuesStatusForFixVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionIssuesStatusForFixVersion read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VersionIssuesStatusForFixVersion given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VersionIssuesStatusForFixVersion
  * @throws IOException if the JSON string is invalid with respect to VersionIssuesStatusForFixVersion
  */
  public static VersionIssuesStatusForFixVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionIssuesStatusForFixVersion.class);
  }

 /**
  * Convert an instance of VersionIssuesStatusForFixVersion to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

