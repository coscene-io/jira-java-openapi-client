/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v3.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;

import io.coscene.jira.client.v3.JSON;

/**
 * Details of an issue transition.
 */
@ApiModel(description = "Details of an issue transition.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T17:36:49.012380+08:00[Asia/Shanghai]")
public class IssueTransition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private IssueTransitionTo to;

  public static final String SERIALIZED_NAME_HAS_SCREEN = "hasScreen";
  @SerializedName(SERIALIZED_NAME_HAS_SCREEN)
  private Boolean hasScreen;

  public static final String SERIALIZED_NAME_IS_GLOBAL = "isGlobal";
  @SerializedName(SERIALIZED_NAME_IS_GLOBAL)
  private Boolean isGlobal;

  public static final String SERIALIZED_NAME_IS_INITIAL = "isInitial";
  @SerializedName(SERIALIZED_NAME_IS_INITIAL)
  private Boolean isInitial;

  public static final String SERIALIZED_NAME_IS_AVAILABLE = "isAvailable";
  @SerializedName(SERIALIZED_NAME_IS_AVAILABLE)
  private Boolean isAvailable;

  public static final String SERIALIZED_NAME_IS_CONDITIONAL = "isConditional";
  @SerializedName(SERIALIZED_NAME_IS_CONDITIONAL)
  private Boolean isConditional;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, FieldMetadata> fields = null;

  public static final String SERIALIZED_NAME_EXPAND = "expand";
  @SerializedName(SERIALIZED_NAME_EXPAND)
  private String expand;

  public static final String SERIALIZED_NAME_LOOPED = "looped";
  @SerializedName(SERIALIZED_NAME_LOOPED)
  private Boolean looped;

  public IssueTransition() {
  }

  
  public IssueTransition(
     String name, 
     Boolean hasScreen, 
     Boolean isGlobal, 
     Boolean isInitial, 
     Boolean isAvailable, 
     Boolean isConditional, 
     Map<String, FieldMetadata> fields, 
     String expand
  ) {
    this();
    this.name = name;
    this.hasScreen = hasScreen;
    this.isGlobal = isGlobal;
    this.isInitial = isInitial;
    this.isAvailable = isAvailable;
    this.isConditional = isConditional;
    this.fields = fields;
    this.expand = expand;
  }

  public IssueTransition id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the issue transition. Required when specifying a transition to undertake.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the issue transition. Required when specifying a transition to undertake.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


   /**
   * The name of the issue transition.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the issue transition.")

  public String getName() {
    return name;
  }




  public IssueTransition to(IssueTransitionTo to) {
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public IssueTransitionTo getTo() {
    return to;
  }


  public void setTo(IssueTransitionTo to) {
    this.to = to;
  }


   /**
   * Whether there is a screen associated with the issue transition.
   * @return hasScreen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether there is a screen associated with the issue transition.")

  public Boolean getHasScreen() {
    return hasScreen;
  }




   /**
   * Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
   * @return isGlobal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.")

  public Boolean getIsGlobal() {
    return isGlobal;
  }




   /**
   * Whether this is the initial issue transition for the workflow.
   * @return isInitial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether this is the initial issue transition for the workflow.")

  public Boolean getIsInitial() {
    return isInitial;
  }




   /**
   * Whether the transition is available to be performed.
   * @return isAvailable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the transition is available to be performed.")

  public Boolean getIsAvailable() {
    return isAvailable;
  }




   /**
   * Whether the issue has to meet criteria before the issue transition is applied.
   * @return isConditional
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether the issue has to meet criteria before the issue transition is applied.")

  public Boolean getIsConditional() {
    return isConditional;
  }




   /**
   * Details of the fields associated with the issue transition screen. Use this information to populate &#x60;fields&#x60; and &#x60;update&#x60; in a transition request.
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.")

  public Map<String, FieldMetadata> getFields() {
    return fields;
  }




   /**
   * Expand options that include additional transition details in the response.
   * @return expand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Expand options that include additional transition details in the response.")

  public String getExpand() {
    return expand;
  }




  public IssueTransition looped(Boolean looped) {
    
    this.looped = looped;
    return this;
  }

   /**
   * Get looped
   * @return looped
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getLooped() {
    return looped;
  }


  public void setLooped(Boolean looped) {
    this.looped = looped;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public IssueTransition putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueTransition issueTransition = (IssueTransition) o;
    return Objects.equals(this.id, issueTransition.id) &&
        Objects.equals(this.name, issueTransition.name) &&
        Objects.equals(this.to, issueTransition.to) &&
        Objects.equals(this.hasScreen, issueTransition.hasScreen) &&
        Objects.equals(this.isGlobal, issueTransition.isGlobal) &&
        Objects.equals(this.isInitial, issueTransition.isInitial) &&
        Objects.equals(this.isAvailable, issueTransition.isAvailable) &&
        Objects.equals(this.isConditional, issueTransition.isConditional) &&
        Objects.equals(this.fields, issueTransition.fields) &&
        Objects.equals(this.expand, issueTransition.expand) &&
        Objects.equals(this.looped, issueTransition.looped)&&
        Objects.equals(this.additionalProperties, issueTransition.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, to, hasScreen, isGlobal, isInitial, isAvailable, isConditional, fields, expand, looped, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueTransition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    hasScreen: ").append(toIndentedString(hasScreen)).append("\n");
    sb.append("    isGlobal: ").append(toIndentedString(isGlobal)).append("\n");
    sb.append("    isInitial: ").append(toIndentedString(isInitial)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    isConditional: ").append(toIndentedString(isConditional)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    looped: ").append(toIndentedString(looped)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("to");
    openapiFields.add("hasScreen");
    openapiFields.add("isGlobal");
    openapiFields.add("isInitial");
    openapiFields.add("isAvailable");
    openapiFields.add("isConditional");
    openapiFields.add("fields");
    openapiFields.add("expand");
    openapiFields.add("looped");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IssueTransition
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (IssueTransition.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssueTransition is not found in the empty JSON string", IssueTransition.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        IssueTransitionTo.validateJsonObject(jsonObj.getAsJsonObject("to"));
      }
      if ((jsonObj.get("expand") != null && !jsonObj.get("expand").isJsonNull()) && !jsonObj.get("expand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expand").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssueTransition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssueTransition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssueTransition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssueTransition.class));

       return (TypeAdapter<T>) new TypeAdapter<IssueTransition>() {
           @Override
           public void write(JsonWriter out, IssueTransition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IssueTransition read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IssueTransition instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IssueTransition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IssueTransition
  * @throws IOException if the JSON string is invalid with respect to IssueTransition
  */
  public static IssueTransition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssueTransition.class);
  }

 /**
  * Convert an instance of IssueTransition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

