/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v3.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import io.coscene.jira.client.v3.JSON;

/**
 * A change item.
 */
@ApiModel(description = "A change item.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T17:36:49.012380+08:00[Asia/Shanghai]")
public class ChangeDetails {
  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  private String field;

  public static final String SERIALIZED_NAME_FIELDTYPE = "fieldtype";
  @SerializedName(SERIALIZED_NAME_FIELDTYPE)
  private String fieldtype;

  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_FROM_STRING = "fromString";
  @SerializedName(SERIALIZED_NAME_FROM_STRING)
  private String fromString;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TO_STRING = "toString";
  @SerializedName(SERIALIZED_NAME_TO_STRING)
  private String toString;

  public ChangeDetails() {
  }

  
  public ChangeDetails(
     String field, 
     String fieldtype, 
     String fieldId, 
     String from, 
     String fromString, 
     String to, 
     String toString
  ) {
    this();
    this.field = field;
    this.fieldtype = fieldtype;
    this.fieldId = fieldId;
    this.from = from;
    this.fromString = fromString;
    this.to = to;
    this.toString = toString;
  }

   /**
   * The name of the field changed.
   * @return field
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the field changed.")

  public String getField() {
    return field;
  }




   /**
   * The type of the field changed.
   * @return fieldtype
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the field changed.")

  public String getFieldtype() {
    return fieldtype;
  }




   /**
   * The ID of the field changed.
   * @return fieldId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the field changed.")

  public String getFieldId() {
    return fieldId;
  }




   /**
   * The details of the original value.
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The details of the original value.")

  public String getFrom() {
    return from;
  }




   /**
   * The details of the original value as a string.
   * @return fromString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The details of the original value as a string.")

  public String getFromString() {
    return fromString;
  }




   /**
   * The details of the new value.
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The details of the new value.")

  public String getTo() {
    return to;
  }




   /**
   * The details of the new value as a string.
   * @return toString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The details of the new value as a string.")

  public String getToString() {
    return toString;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeDetails changeDetails = (ChangeDetails) o;
    return Objects.equals(this.field, changeDetails.field) &&
        Objects.equals(this.fieldtype, changeDetails.fieldtype) &&
        Objects.equals(this.fieldId, changeDetails.fieldId) &&
        Objects.equals(this.from, changeDetails.from) &&
        Objects.equals(this.fromString, changeDetails.fromString) &&
        Objects.equals(this.to, changeDetails.to) &&
        Objects.equals(this.toString, changeDetails.toString);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, fieldtype, fieldId, from, fromString, to, toString);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeDetails {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    fieldtype: ").append(toIndentedString(fieldtype)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    fromString: ").append(toIndentedString(fromString)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    toString: ").append(toIndentedString(toString)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field");
    openapiFields.add("fieldtype");
    openapiFields.add("fieldId");
    openapiFields.add("from");
    openapiFields.add("fromString");
    openapiFields.add("to");
    openapiFields.add("toString");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChangeDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ChangeDetails.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeDetails is not found in the empty JSON string", ChangeDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChangeDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeDetails` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("field") != null && !jsonObj.get("field").isJsonNull()) && !jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      if ((jsonObj.get("fieldtype") != null && !jsonObj.get("fieldtype").isJsonNull()) && !jsonObj.get("fieldtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldtype").toString()));
      }
      if ((jsonObj.get("fieldId") != null && !jsonObj.get("fieldId").isJsonNull()) && !jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("fromString") != null && !jsonObj.get("fromString").isJsonNull()) && !jsonObj.get("fromString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromString").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("toString") != null && !jsonObj.get("toString").isJsonNull()) && !jsonObj.get("toString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toString").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeDetails>() {
           @Override
           public void write(JsonWriter out, ChangeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChangeDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChangeDetails
  * @throws IOException if the JSON string is invalid with respect to ChangeDetails
  */
  public static ChangeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeDetails.class);
  }

 /**
  * Convert an instance of ChangeDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

