/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v3.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import io.coscene.jira.client.v3.JSON;

/**
 * The rules of the transition.
 */
@ApiModel(description = "The rules of the transition.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T17:36:49.012380+08:00[Asia/Shanghai]")
public class CreateWorkflowTransitionDetailsRules {
  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private CreateWorkflowTransitionRulesDetailsConditions conditions;

  public static final String SERIALIZED_NAME_VALIDATORS = "validators";
  @SerializedName(SERIALIZED_NAME_VALIDATORS)
  private List<CreateWorkflowTransitionRule> validators = null;

  public static final String SERIALIZED_NAME_POST_FUNCTIONS = "postFunctions";
  @SerializedName(SERIALIZED_NAME_POST_FUNCTIONS)
  private List<CreateWorkflowTransitionRule> postFunctions = null;

  public CreateWorkflowTransitionDetailsRules() {
  }

  public CreateWorkflowTransitionDetailsRules conditions(CreateWorkflowTransitionRulesDetailsConditions conditions) {
    
    this.conditions = conditions;
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateWorkflowTransitionRulesDetailsConditions getConditions() {
    return conditions;
  }


  public void setConditions(CreateWorkflowTransitionRulesDetailsConditions conditions) {
    this.conditions = conditions;
  }


  public CreateWorkflowTransitionDetailsRules validators(List<CreateWorkflowTransitionRule> validators) {
    
    this.validators = validators;
    return this;
  }

  public CreateWorkflowTransitionDetailsRules addValidatorsItem(CreateWorkflowTransitionRule validatorsItem) {
    if (this.validators == null) {
      this.validators = new ArrayList<>();
    }
    this.validators.add(validatorsItem);
    return this;
  }

   /**
   * The workflow validators.  **Note:** The default permission validator is always added to the *initial* transition, as in:      \&quot;validators\&quot;: [         {             \&quot;type\&quot;: \&quot;PermissionValidator\&quot;,             \&quot;configuration\&quot;: {                 \&quot;permissionKey\&quot;: \&quot;CREATE_ISSUES\&quot;             }         }     ]
   * @return validators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The workflow validators.  **Note:** The default permission validator is always added to the *initial* transition, as in:      \"validators\": [         {             \"type\": \"PermissionValidator\",             \"configuration\": {                 \"permissionKey\": \"CREATE_ISSUES\"             }         }     ]")

  public List<CreateWorkflowTransitionRule> getValidators() {
    return validators;
  }


  public void setValidators(List<CreateWorkflowTransitionRule> validators) {
    this.validators = validators;
  }


  public CreateWorkflowTransitionDetailsRules postFunctions(List<CreateWorkflowTransitionRule> postFunctions) {
    
    this.postFunctions = postFunctions;
    return this;
  }

  public CreateWorkflowTransitionDetailsRules addPostFunctionsItem(CreateWorkflowTransitionRule postFunctionsItem) {
    if (this.postFunctions == null) {
      this.postFunctions = new ArrayList<>();
    }
    this.postFunctions.add(postFunctionsItem);
    return this;
  }

   /**
   * The workflow post functions.  **Note:** The default post functions are always added to the *initial* transition, as in:      \&quot;postFunctions\&quot;: [         {             \&quot;type\&quot;: \&quot;IssueCreateFunction\&quot;         },         {             \&quot;type\&quot;: \&quot;IssueReindexFunction\&quot;         },         {             \&quot;type\&quot;: \&quot;FireIssueEventFunction\&quot;,             \&quot;configuration\&quot;: {                 \&quot;event\&quot;: {                     \&quot;id\&quot;: \&quot;1\&quot;,                     \&quot;name\&quot;: \&quot;issue_created\&quot;                 }             }         }     ]  **Note:** The default post functions are always added to the *global* and *directed* transitions, as in:      \&quot;postFunctions\&quot;: [         {             \&quot;type\&quot;: \&quot;UpdateIssueStatusFunction\&quot;         },         {             \&quot;type\&quot;: \&quot;CreateCommentFunction\&quot;         },         {             \&quot;type\&quot;: \&quot;GenerateChangeHistoryFunction\&quot;         },         {             \&quot;type\&quot;: \&quot;IssueReindexFunction\&quot;         },         {             \&quot;type\&quot;: \&quot;FireIssueEventFunction\&quot;,             \&quot;configuration\&quot;: {                 \&quot;event\&quot;: {                     \&quot;id\&quot;: \&quot;13\&quot;,                     \&quot;name\&quot;: \&quot;issue_generic\&quot;                 }             }         }     ]
   * @return postFunctions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The workflow post functions.  **Note:** The default post functions are always added to the *initial* transition, as in:      \"postFunctions\": [         {             \"type\": \"IssueCreateFunction\"         },         {             \"type\": \"IssueReindexFunction\"         },         {             \"type\": \"FireIssueEventFunction\",             \"configuration\": {                 \"event\": {                     \"id\": \"1\",                     \"name\": \"issue_created\"                 }             }         }     ]  **Note:** The default post functions are always added to the *global* and *directed* transitions, as in:      \"postFunctions\": [         {             \"type\": \"UpdateIssueStatusFunction\"         },         {             \"type\": \"CreateCommentFunction\"         },         {             \"type\": \"GenerateChangeHistoryFunction\"         },         {             \"type\": \"IssueReindexFunction\"         },         {             \"type\": \"FireIssueEventFunction\",             \"configuration\": {                 \"event\": {                     \"id\": \"13\",                     \"name\": \"issue_generic\"                 }             }         }     ]")

  public List<CreateWorkflowTransitionRule> getPostFunctions() {
    return postFunctions;
  }


  public void setPostFunctions(List<CreateWorkflowTransitionRule> postFunctions) {
    this.postFunctions = postFunctions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkflowTransitionDetailsRules createWorkflowTransitionDetailsRules = (CreateWorkflowTransitionDetailsRules) o;
    return Objects.equals(this.conditions, createWorkflowTransitionDetailsRules.conditions) &&
        Objects.equals(this.validators, createWorkflowTransitionDetailsRules.validators) &&
        Objects.equals(this.postFunctions, createWorkflowTransitionDetailsRules.postFunctions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditions, validators, postFunctions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkflowTransitionDetailsRules {\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    validators: ").append(toIndentedString(validators)).append("\n");
    sb.append("    postFunctions: ").append(toIndentedString(postFunctions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conditions");
    openapiFields.add("validators");
    openapiFields.add("postFunctions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateWorkflowTransitionDetailsRules
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CreateWorkflowTransitionDetailsRules.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateWorkflowTransitionDetailsRules is not found in the empty JSON string", CreateWorkflowTransitionDetailsRules.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateWorkflowTransitionDetailsRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateWorkflowTransitionDetailsRules` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `conditions`
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull()) {
        CreateWorkflowTransitionRulesDetailsConditions.validateJsonObject(jsonObj.getAsJsonObject("conditions"));
      }
      if (jsonObj.get("validators") != null && !jsonObj.get("validators").isJsonNull()) {
        JsonArray jsonArrayvalidators = jsonObj.getAsJsonArray("validators");
        if (jsonArrayvalidators != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validators").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validators` to be an array in the JSON string but got `%s`", jsonObj.get("validators").toString()));
          }

          // validate the optional field `validators` (array)
          for (int i = 0; i < jsonArrayvalidators.size(); i++) {
            CreateWorkflowTransitionRule.validateJsonObject(jsonArrayvalidators.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("postFunctions") != null && !jsonObj.get("postFunctions").isJsonNull()) {
        JsonArray jsonArraypostFunctions = jsonObj.getAsJsonArray("postFunctions");
        if (jsonArraypostFunctions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("postFunctions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `postFunctions` to be an array in the JSON string but got `%s`", jsonObj.get("postFunctions").toString()));
          }

          // validate the optional field `postFunctions` (array)
          for (int i = 0; i < jsonArraypostFunctions.size(); i++) {
            CreateWorkflowTransitionRule.validateJsonObject(jsonArraypostFunctions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateWorkflowTransitionDetailsRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateWorkflowTransitionDetailsRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateWorkflowTransitionDetailsRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateWorkflowTransitionDetailsRules.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateWorkflowTransitionDetailsRules>() {
           @Override
           public void write(JsonWriter out, CreateWorkflowTransitionDetailsRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateWorkflowTransitionDetailsRules read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateWorkflowTransitionDetailsRules given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateWorkflowTransitionDetailsRules
  * @throws IOException if the JSON string is invalid with respect to CreateWorkflowTransitionDetailsRules
  */
  public static CreateWorkflowTransitionDetailsRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateWorkflowTransitionDetailsRules.class);
  }

 /**
  * Convert an instance of CreateWorkflowTransitionDetailsRules to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

