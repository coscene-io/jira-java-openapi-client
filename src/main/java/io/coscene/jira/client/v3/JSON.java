/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v3;

import static io.coscene.jira.client.CosConstant.JIRA_RESPONSE_FORMATTER;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import okio.ByteString;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
  private static Logger log = LoggerFactory.getLogger(JSON.class);
  private static Gson gson;
  private static boolean isLenientOnJson = false;
  private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
  private static InstantAdapter
      instantAdapter = new InstantAdapter();
  private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
  private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter =
      new OffsetDateTimeTypeAdapter();
  private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
  private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

  {
    GsonBuilder gsonBuilder = createGson();
    gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
    gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
    gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
    gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
    gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ActorInputBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ActorsMap.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AddFieldBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AddGroupBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AnnouncementBannerConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AnnouncementBannerConfigurationUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Application.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ApplicationProperty.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ApplicationRole.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AssociateFieldConfigurationsWithIssueTypesRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AssociatedItemBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Attachment.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentArchive.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentArchiveEntry.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentArchiveImpl.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentArchiveItemReadable.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentArchiveMetadataReadable.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentAuthor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentMetadataAuthor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AttachmentSettings.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AuditRecordBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AuditRecords.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AutoCompleteSuggestion.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AutoCompleteSuggestions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AvailableDashboardGadget.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AvailableDashboardGadgetsResponse.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Avatar.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.AvatarUrlsBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Avatars.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkCustomFieldOptionCreateRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkCustomFieldOptionUpdateRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkIssueIsWatching.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkIssuePropertyUpdateRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkIssuePropertyUpdateRequestFilter.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkOperationErrorResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkPermissionGrants.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkPermissionsRequestBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkProjectPermissionGrants.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.BulkProjectPermissions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ChangeDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ChangeFilterOwner.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ChangedValueBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ChangedWorklog.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ChangedWorklogs.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Changelog.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ChangelogAuthor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ChangelogHistoryMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ColumnItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Comment.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CommentAuthor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CommentUpdateAuthor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CommentVisibility.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ComponentIssuesCount.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ComponentWithIssueCount.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ComponentWithIssueCountAssignee.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ComponentWithIssueCountLead.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ComponentWithIssueCountRealAssignee.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CompoundClause.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ConfigurationTimeTrackingConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ConnectCustomFieldValue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ConnectCustomFieldValues.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ConnectModules.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ConnectWorkflowTransitionRule.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ContainerForProjectFeatures.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ContainerForRegisteredWebhooks.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ContainerForWebhookIDs.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ContainerOfWorkflowSchemeAssociations.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Context.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ContextForProjectAndIssueType.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ContextScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ContextualConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ConvertedJQLQueries.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateCustomFieldContext.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreatePriorityDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateProjectDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateResolutionDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateUiModificationDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateUpdateRoleRequestBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowCondition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowStatusDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowTransitionDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowTransitionDetailsRules.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowTransitionDetailsScreen.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowTransitionRule.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowTransitionRulesDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowTransitionRulesDetailsConditions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreateWorkflowTransitionScreenDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreatedIssue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreatedIssueTransition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CreatedIssues.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomContextVariable.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldConfigurations.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContext.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueCascadingOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueDate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueDateTime.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueFloat.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeDateTimeField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeGroupField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiGroupField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiStringField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiUserField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeNumberField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeObjectField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeStringField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeUserField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueLabels.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultiUserPicker.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleGroupPicker.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleVersionPicker.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueProject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueReadOnly.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleGroupPicker.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleVersionPicker.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueTextArea.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueTextField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueURL.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextProjectMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextSingleUserPickerDefaults.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldContextUpdateDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldCreatedContextOptionsList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldDefinitionJsonBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldOptionCreate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldOptionUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldReplacement.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldUpdatedContextOptionsList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldValueUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.CustomFieldValueUpdateDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Dashboard.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardGadget.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardGadgetPosition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardGadgetResponse.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardGadgetSettings.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardGadgetSettingsPosition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardGadgetUpdateRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardGadgetUpdateRequestPosition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DashboardOwner.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DefaultShareScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DefaultWorkflow.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DeleteAndReplaceVersionBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DeprecatedWorkflow.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.DeprecatedWorkflowScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.EntityProperty.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.EntityPropertyDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ErrorCollection.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ErrorMessage.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.EventNotification.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.EventNotificationField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.EventNotificationGroup.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.EventNotificationProjectRole.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.EventNotificationUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FailedWebhook.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FailedWebhooks.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Field.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldChangedClause.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationIssueTypeItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationItemsDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationSchemeProjectAssociation.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationSchemeProjects.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldConfigurationToIssueTypeMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldDetailsSchema.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldDetailsScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldLastUsed.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldMetadataSchema.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldReferenceData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldUpdateOperation.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldValueClause.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldWasClause.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Fields.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldsAssignee.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldsIssueType.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldsPriority.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldsStatus.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FieldsTimetracking.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Filter.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterDetailsOwner.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterOwner.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterSharedUsers.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterSubscription.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterSubscriptionGroup.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterSubscriptionUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterSubscriptions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FilterSubscriptionsList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FoundGroup.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FoundGroups.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FoundUsers.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FoundUsersAndGroups.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FunctionOperand.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.FunctionReferenceData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.GlobalScopeBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Group.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.GroupDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.GroupLabel.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.GroupName.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.GroupUsers.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.HealthCheckResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Hierarchy.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.HistoryMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.HistoryMetadataActor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.HistoryMetadataCause.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.HistoryMetadataGenerator.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.HistoryMetadataParticipant.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Icon.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IconBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IdBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IdOrKeyBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IncludedFields.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueBeanChangelog.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueBeanEditmeta.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueBeanOperations.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueChangelogIds.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueCommentListRequestBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueContextVariable.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueCreateMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueEntityProperties.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueEntityPropertiesForMultiUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueEvent.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFieldOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFieldOptionConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFieldOptionConfigurationScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFieldOptionCreateBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFieldOptionScopeBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFieldOptionScopeBeanGlobal.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFilterForBulkPropertyDelete.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueFilterForBulkPropertySet.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueLink.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueLinkInwardIssue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueLinkOutwardIssue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueLinkType.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueLinkTypes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueMatches.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueMatchesForJQL.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssuePickerSuggestions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssuePickerSuggestionsIssueType.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueSecurityLevelMember.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueSecurityLevelMemberHolder.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTransition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTransitionTo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeCreateBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeDetailsScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeIds.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeIdsToRemove.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeIssueCreateMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeSchemeDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeSchemeID.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeSchemeMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeSchemeProjectAssociation.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeSchemeProjects.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeSchemeProjectsIssueTypeScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeSchemeUpdateDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemeDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemeId.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemeItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemeMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemeMappingDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemeProjectAssociation.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemeUpdateDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemesProjects.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeScreenSchemesProjectsIssueTypeScreenScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeToContextMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeUpdateBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeWithStatus.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypeWorkflowMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueTypesWorkflowMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueUpdateDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueUpdateDetailsHistoryMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueUpdateDetailsTransition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssueUpdateMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssuesAndJQLQueries.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssuesJqlMetaDataBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssuesMetaBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.IssuesUpdateBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JQLPersonalDataMigrationRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JQLQueryWithUnknownUsers.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JQLReferenceData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JexpIssues.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JexpIssuesJql.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JexpJqlIssues.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionAnalysis.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionComplexity.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvalContextBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvalContextBeanIssue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvalContextBeanIssues.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvalContextBeanProject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvalRequestBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvalRequestBeanContext.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvaluationMetaDataBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvaluationMetaDataBeanComplexity.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionEvaluationMetaDataBeanIssues.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionForAnalysis.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionResultMeta.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionValidationError.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionsAnalysis.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionsComplexityBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionsComplexityBeanBeans.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionsComplexityBeanExpensiveOperations.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionsComplexityBeanPrimitiveValues.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionsComplexityBeanSteps.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraExpressionsComplexityValueBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JiraStatus.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueriesToParse.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueriesToSanitize.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQuery.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryClause.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryClauseOperand.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryClauseTimePredicate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryFieldEntityProperty.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryOrderByClause.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryOrderByClauseElement.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryToSanitize.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JqlQueryUnitaryOperand.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JsonContextVariable.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JsonNode.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.JsonTypeBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.KeywordOperand.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.License.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.LicensedApplication.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.LinkGroup.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.LinkIssueRequestJsonBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.LinkedIssue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.LinkedIssueFields.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ListOperand.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Locale.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ModelConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.MoveFieldBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.MultiIssueEntityProperties.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.MultipleCustomFieldValuesUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.MultipleCustomFieldValuesUpdateDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NestedResponse.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NewUserDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Notification.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationEvent.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationEventTemplateEvent.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationRecipients.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationRecipientsRestrictions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationRestrict.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationSchemeEvent.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationSchemeScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.NotificationTo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.OperationMessage.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Operations.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.OrderOfCustomFieldOptions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.OrderOfIssueTypes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanChangelog.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanComment.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanComponentWithIssueCount.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanContext.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanContextForProjectAndIssueType.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanContextualConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanCustomFieldContext.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanCustomFieldContextDefaultValue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanCustomFieldContextOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanCustomFieldContextProjectMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanDashboard.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanFieldConfigurationDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanFieldConfigurationIssueTypeItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanFieldConfigurationItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanFieldConfigurationScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanFieldConfigurationSchemeProjects.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanFilterDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanGroupDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueFieldOption.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueSecurityLevelMember.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueTypeScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueTypeSchemeMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueTypeSchemeProjects.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueTypeScreenScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueTypeScreenSchemeItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueTypeScreenSchemesProjects.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanIssueTypeToContextMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanNotificationScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanPriority.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanProject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanProjectDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanResolutionJsonBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanScreen.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanScreenScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanScreenWithTab.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanString.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanUiModificationDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanUserDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanUserKey.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanVersion.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanWebhook.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanWorkflow.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanWorkflowScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageBeanWorkflowTransitionRules.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageOfChangelogs.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageOfComments.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageOfDashboards.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageOfStatuses.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PageOfWorklogs.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PagedListUserDetailsApplicationUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PaginatedResponseComment.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ParsedJqlQueries.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ParsedJqlQuery.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ParsedJqlQueryStructure.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionGrant.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionGrantHolder.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionGrants.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionHolder.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionSchemeScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionSchemes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Permissions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermissionsKeysBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PermittedProjects.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Priority.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PriorityId.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Project.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectArchivedBy.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectAvatars.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectCategory.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectComponent.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectComponentAssignee.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectComponentLead.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectComponentRealAssignee.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectDeletedBy.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectDetailsAvatarUrls.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectDetailsProjectCategory.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectEmailAddress.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectFeature.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectFeatureState.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectId.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIdentifierBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIdentifiers.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIds.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectInsight.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueCreateMetadata.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueCreateMetadataAvatarUrls.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueSecurityLevels.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueTypeHierarchy.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueTypeMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueTypeMappings.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueTypes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectIssueTypesHierarchyLevel.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectLandingPageInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectLead.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectPermissions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectProjectCategory.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectRole.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectRoleActorsUpdateBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectRoleDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectRoleGroup.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectRoleScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectRoleUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectScopeBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ProjectType.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PropertyKey.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PropertyKeys.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PublishDraftWorkflowScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.PublishedWorkflowId.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RegisteredWebhook.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteIssueLink.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteIssueLinkApplication.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteIssueLinkIdentifies.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteIssueLinkObject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteIssueLinkRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteIssueLinkRequestApplication.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteObject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteObjectIcon.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoteObjectStatus.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoveOptionFromIssuesResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RemoveOptionFromIssuesResultErrors.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ReorderIssuePriorities.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ReorderIssueResolutionsRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Resolution.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ResolutionId.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ResolutionJsonBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RestrictedPermission.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RichText.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RoleActor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.RuleConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SanitizedJqlQueries.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SanitizedJqlQuery.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SanitizedJqlQueryErrors.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Scope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScopeProject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Screen.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenSchemeDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenSchemeDetailsScreens.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenSchemeId.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenSchemeIssueTypeScreenSchemes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenSchemeScreens.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenTypes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenWithTab.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenWithTabTab.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenableField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ScreenableTab.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SearchAutoCompleteFilter.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SearchRequestBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SearchResults.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SecurityLevel.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SecurityScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SecuritySchemes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ServerInformation.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ServiceManagementNavigationInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SetDefaultPriorityRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SetDefaultResolutionRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SharePermission.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SharePermissionGroup.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SharePermissionInputBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SharePermissionProject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SharePermissionRole.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SharePermissionUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SimpleApplicationPropertyBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SimpleErrorCollection.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SimpleLink.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SimpleListWrapperApplicationRole.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SimpleListWrapperGroupName.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SimplifiedHierarchyLevel.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SoftwareNavigationInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Status.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusCategory.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusCreate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusCreateRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusDetailsStatusCategory.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusIcon.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusMapping.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusScope.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.StatusUpdateRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SuggestedIssue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.SystemAvatars.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.TaskProgressBeanObject.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.TaskProgressBeanRemoveOptionFromIssuesResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.TaskProgressBeanRemoveOptionFromIssuesResultResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.TimeTrackingConfiguration.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.TimeTrackingDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.TimeTrackingProvider.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Transition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.TransitionScreenDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Transitions.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UiModificationContextDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UiModificationDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UiModificationIdentifiers.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UnrestrictedUserEmail.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateCustomFieldDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateDefaultScreenScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateFieldConfigurationSchemeDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdatePriorityDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateProjectDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateResolutionDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateScreenDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateScreenSchemeDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateScreenSchemeDetailsScreens.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateScreenTypes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateUiModificationDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdateUserToGroupBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UpdatedProjectCategory.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.User.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserApplicationRoles.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserBeanAvatarUrls.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserContextVariable.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserDetailsAvatarUrls.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserFilter.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserGroups.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserKey.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserMigrationBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserPermission.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.UserPickerUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.ValueOperand.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Version.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.VersionIssueCounts.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.VersionIssuesStatus.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.VersionIssuesStatusForFixVersion.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.VersionMoveBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.VersionUnresolvedIssuesCount.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.VersionUsageInCustomField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Visibility.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Votes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Watchers.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Webhook.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WebhookDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WebhookRegistrationDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WebhooksExpirationDate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkManagementNavigationInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Workflow.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowCompoundCondition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowCondition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowIDs.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowId.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowOperations.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowRules.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowRulesSearch.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowRulesSearchDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowSchemeAssociations.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowSchemeAssociationsWorkflowScheme.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowSchemeIdName.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowSchemeLastModifiedUser.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowSchemeProjectAssociation.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowSimpleCondition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowStatus.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransitionProperty.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransitionRule.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransitionRules.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransitionRulesDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransitionRulesUpdate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransitionRulesUpdateErrorDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowTransitionRulesUpdateErrors.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorkflowsWithTransitionRulesDetails.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.Worklog.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorklogAuthor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorklogIdsRequestBean.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorklogUpdateAuthor.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new io.coscene.jira.client.v3.model.WorklogVisibility.CustomTypeAdapterFactory());
    gson = gsonBuilder.create();
  }

  @SuppressWarnings("unchecked")
  public static GsonBuilder createGson() {
    GsonFireBuilder fireBuilder = new GsonFireBuilder()
        .registerTypeSelector(io.coscene.jira.client.v3.model.CustomContextVariable.class,
            new TypeSelector<io.coscene.jira.client.v3.model.CustomContextVariable>() {
              @Override
              public Class<? extends io.coscene.jira.client.v3.model.CustomContextVariable> getClassForElement(
                  JsonElement readElement) {
                Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                classByDiscriminatorValue.put("IssueContextVariable",
                    io.coscene.jira.client.v3.model.IssueContextVariable.class);
                classByDiscriminatorValue.put("JsonContextVariable",
                    io.coscene.jira.client.v3.model.JsonContextVariable.class);
                classByDiscriminatorValue.put("UserContextVariable",
                    io.coscene.jira.client.v3.model.UserContextVariable.class);
                classByDiscriminatorValue.put("issue",
                    io.coscene.jira.client.v3.model.IssueContextVariable.class);
                classByDiscriminatorValue.put("json",
                    io.coscene.jira.client.v3.model.JsonContextVariable.class);
                classByDiscriminatorValue.put("user",
                    io.coscene.jira.client.v3.model.UserContextVariable.class);
                classByDiscriminatorValue.put("CustomContextVariable",
                    io.coscene.jira.client.v3.model.CustomContextVariable.class);
                return getClassByDiscriminator(classByDiscriminatorValue,
                    getDiscriminatorValue(readElement, "type"));
              }
            })
        .registerTypeSelector(io.coscene.jira.client.v3.model.CustomFieldContextDefaultValue.class,
            new TypeSelector<io.coscene.jira.client.v3.model.CustomFieldContextDefaultValue>() {
              @Override
              public Class<? extends io.coscene.jira.client.v3.model.CustomFieldContextDefaultValue> getClassForElement(
                  JsonElement readElement) {
                Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueCascadingOption",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueCascadingOption.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueDate",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueDate.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueDateTime",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueDateTime.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueFloat",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueFloat.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeDateTimeField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeDateTimeField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeGroupField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeGroupField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeMultiGroupField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiGroupField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeMultiStringField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiStringField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeMultiUserField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiUserField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeNumberField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeNumberField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeObjectField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeObjectField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeStringField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeStringField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueForgeUserField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeUserField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueLabels",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueLabels.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueMultiUserPicker",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultiUserPicker.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueMultipleGroupPicker",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleGroupPicker.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueMultipleOption",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleOption.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueMultipleVersionPicker",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleVersionPicker.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueProject",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueProject.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueReadOnly",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueReadOnly.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueSingleGroupPicker",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleGroupPicker.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueSingleOption",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleOption.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueSingleVersionPicker",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleVersionPicker.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueTextArea",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueTextArea.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueTextField",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueTextField.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValueURL",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueURL.class);
                classByDiscriminatorValue.put("CustomFieldContextSingleUserPickerDefaults",
                    io.coscene.jira.client.v3.model.CustomFieldContextSingleUserPickerDefaults.class);
                classByDiscriminatorValue.put("datepicker",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueDate.class);
                classByDiscriminatorValue.put("datetimepicker",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueDateTime.class);
                classByDiscriminatorValue.put("float",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueFloat.class);
                classByDiscriminatorValue.put("forge.datetime",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeDateTimeField.class);
                classByDiscriminatorValue.put("forge.group",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeGroupField.class);
                classByDiscriminatorValue.put("forge.group.list",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiGroupField.class);
                classByDiscriminatorValue.put("forge.number",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeNumberField.class);
                classByDiscriminatorValue.put("forge.object",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeObjectField.class);
                classByDiscriminatorValue.put("forge.string",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeStringField.class);
                classByDiscriminatorValue.put("forge.string.list",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiStringField.class);
                classByDiscriminatorValue.put("forge.user",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeUserField.class);
                classByDiscriminatorValue.put("forge.user.list",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueForgeMultiUserField.class);
                classByDiscriminatorValue.put("grouppicker.multiple",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleGroupPicker.class);
                classByDiscriminatorValue.put("grouppicker.single",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleGroupPicker.class);
                classByDiscriminatorValue.put("labels",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueLabels.class);
                classByDiscriminatorValue.put("multi.user.select",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultiUserPicker.class);
                classByDiscriminatorValue.put("option.cascading",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueCascadingOption.class);
                classByDiscriminatorValue.put("option.multiple",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleOption.class);
                classByDiscriminatorValue.put("option.single",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleOption.class);
                classByDiscriminatorValue.put("project",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueProject.class);
                classByDiscriminatorValue.put("readonly",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueReadOnly.class);
                classByDiscriminatorValue.put("single.user.select",
                    io.coscene.jira.client.v3.model.CustomFieldContextSingleUserPickerDefaults.class);
                classByDiscriminatorValue.put("textarea",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueTextArea.class);
                classByDiscriminatorValue.put("textfield",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueTextField.class);
                classByDiscriminatorValue.put("url",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueURL.class);
                classByDiscriminatorValue.put("version.multiple",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueMultipleVersionPicker.class);
                classByDiscriminatorValue.put("version.single",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValueSingleVersionPicker.class);
                classByDiscriminatorValue.put("CustomFieldContextDefaultValue",
                    io.coscene.jira.client.v3.model.CustomFieldContextDefaultValue.class);
                return getClassByDiscriminator(classByDiscriminatorValue,
                    getDiscriminatorValue(readElement, "type"));
              }
            })
        .registerTypeSelector(
            io.coscene.jira.client.v3.model.WorkflowCondition.class,
            new TypeSelector<io.coscene.jira.client.v3.model.WorkflowCondition>() {
              @Override
              public Class<? extends io.coscene.jira.client.v3.model.WorkflowCondition> getClassForElement(
                  JsonElement readElement) {
                Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                classByDiscriminatorValue.put("WorkflowCompoundCondition",
                    io.coscene.jira.client.v3.model.WorkflowCompoundCondition.class);
                classByDiscriminatorValue.put("WorkflowSimpleCondition",
                    io.coscene.jira.client.v3.model.WorkflowSimpleCondition.class);
                classByDiscriminatorValue.put("compound",
                    io.coscene.jira.client.v3.model.WorkflowCompoundCondition.class);
                classByDiscriminatorValue.put("simple",
                    io.coscene.jira.client.v3.model.WorkflowSimpleCondition.class);
                classByDiscriminatorValue.put("WorkflowCondition",
                    io.coscene.jira.client.v3.model.WorkflowCondition.class);
                return getClassByDiscriminator(classByDiscriminatorValue,
                    getDiscriminatorValue(readElement, "nodeType"));
              }
            });
    GsonBuilder builder = fireBuilder.createGsonBuilder();
    return builder;
  }

  private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
    JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
    if (null == element) {
      throw new IllegalArgumentException(
          "missing discriminator field: <" + discriminatorField + ">");
    }
    return element.getAsString();
  }

  /**
   * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
   *
   * @param classByDiscriminatorValue The map of discriminator values to Java classes.
   * @param discriminatorValue        The value of the OpenAPI discriminator in the input data.
   * @return The Java class that implements the OpenAPI schema
   */
  private static Class getClassByDiscriminator(Map classByDiscriminatorValue,
                                               String discriminatorValue) {
    Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
    if (null == clazz) {
      throw new IllegalArgumentException(
          "cannot determine model class of name: <" + discriminatorValue + ">");
    }
    return clazz;
  }

  /**
   * Get Gson.
   *
   * @return Gson
   */
  public static Gson getGson() {
    return gson;
  }

  /**
   * Set Gson.
   *
   * @param gson Gson
   */
  public static void setGson(Gson gson) {
    JSON.gson = gson;
  }

  public static void setLenientOnJson(boolean lenientOnJson) {
    isLenientOnJson = lenientOnJson;
  }

  /**
   * Serialize the given Java object into JSON string.
   *
   * @param obj Object
   * @return String representation of the JSON
   */
  public static String serialize(Object obj) {
    return gson.toJson(obj);
  }

  /**
   * Deserialize the given JSON string to Java object.
   *
   * @param <T>        Type
   * @param body       The JSON string
   * @param returnType The type to deserialize into
   * @return The deserialized Java object
   */
  @SuppressWarnings("unchecked")
  public static <T> T deserialize(String body, Type returnType) {
    try {
      if (isLenientOnJson) {
        JsonReader jsonReader = new JsonReader(new StringReader(body));
        // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
        jsonReader.setLenient(true);
        return gson.fromJson(jsonReader, returnType);
      } else {
        return gson.fromJson(body, returnType);
      }
    } catch (JsonParseException e) {
      // Fallback processing when failed to parse JSON form response body:
      // return the response body string directly for the String return type;
      if (returnType.equals(String.class)) {
        return (T) body;
      } else {
        throw (e);
      }
    }
  }

  public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
    offsetDateTimeTypeAdapter.setFormat(dateFormat);
  }

  public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
    localDateTypeAdapter.setFormat(dateFormat);
  }

  public static void setDateFormat(DateFormat dateFormat) {
    dateTypeAdapter.setFormat(dateFormat);
  }

  public static void setSqlDateFormat(DateFormat dateFormat) {
    sqlDateTypeAdapter.setFormat(dateFormat);
  }

  /**
   * Gson TypeAdapter for Byte Array type
   */
  public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

    @Override
    public void write(JsonWriter out, byte[] value) throws IOException {
      if (value == null) {
        out.nullValue();
      } else {
        out.value(ByteString.of(value).base64());
      }
    }

    @Override
    public byte[] read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String bytesAsBase64 = in.nextString();
          ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
          return byteString.toByteArray();
      }
    }
  }

  /**
   * Gson TypeAdapter for JSR310 OffsetDateTime type
   */
  public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

    private DateTimeFormatter formatter;

    public OffsetDateTimeTypeAdapter() {
      this(JIRA_RESPONSE_FORMATTER);
    }

    public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, OffsetDateTime date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public OffsetDateTime read(JsonReader in) throws IOException {
      if (in.peek() == JsonToken.NULL) {
        in.nextNull();
        return null;
      }
      final String text = in.nextString();
      try {
        return OffsetDateTime.parse(text, formatter);
      } catch (Exception e) {
        log.error("parse offset datetime failed: {}", text, e);
        return null;
      }
    }
  }

  /**
   * Gson TypeAdapter for JSR310 LocalDate type
   */
  public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

    private DateTimeFormatter formatter;

    public LocalDateTypeAdapter() {
      this(DateTimeFormatter.ISO_LOCAL_DATE);
    }

    public LocalDateTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, LocalDate date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public LocalDate read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          return LocalDate.parse(date, formatter);
      }
    }
  }

  /**
   * Gson TypeAdapter for java.sql.Date type
   * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
   * (more efficient than SimpleDateFormat).
   */
  public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

    private DateFormat dateFormat;

    public SqlDateTypeAdapter() {
    }

    public SqlDateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, java.sql.Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = date.toString();
        }
        out.value(value);
      }
    }

    @Override
    public java.sql.Date read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          try {
            if (dateFormat != null) {
              return new java.sql.Date(dateFormat.parse(date).getTime());
            }
            return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
          } catch (ParseException e) {
            throw new JsonParseException(e);
          }
      }
    }
  }

  /**
   * Gson TypeAdapter for java.util.Date type
   * If the dateFormat is null, ISO8601Utils will be used.
   */
  public static class DateTypeAdapter extends TypeAdapter<Date> {

    private DateFormat dateFormat;

    public DateTypeAdapter() {
    }

    public DateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = ISO8601Utils.format(date, true);
        }
        out.value(value);
      }
    }

    @Override
    public Date read(JsonReader in) throws IOException {
      try {
        switch (in.peek()) {
          case NULL:
            in.nextNull();
            return null;
          default:
            String date = in.nextString();
            try {
              if (dateFormat != null) {
                return dateFormat.parse(date);
              }
              return ISO8601Utils.parse(date, new ParsePosition(0));
            } catch (ParseException e) {
              throw new JsonParseException(e);
            }
        }
      } catch (IllegalArgumentException e) {
        throw new JsonParseException(e);
      }
    }
  }

  public static class InstantAdapter implements JsonSerializer<Instant>,
      JsonDeserializer<Instant> {

    @Override
    public Instant deserialize(@NotNull JsonElement jsonElement, Type type,
                               JsonDeserializationContext jsonDeserializationContext) throws
        JsonParseException {
      String instantString = jsonElement.getAsString();
      return Instant.parse(instantString);
    }

    @Override
    public JsonElement serialize(@NotNull Instant instant, Type type,
                                 JsonSerializationContext jsonSerializationContext) {
      return new JsonPrimitive(instant.toString());
    }
  }
}
