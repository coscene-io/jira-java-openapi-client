/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v3.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import io.coscene.jira.client.v3.JSON;

/**
 * Details of the sanitized JQL query.
 */
@ApiModel(description = "Details of the sanitized JQL query.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T17:36:49.012380+08:00[Asia/Shanghai]")
public class SanitizedJqlQuery {
  public static final String SERIALIZED_NAME_INITIAL_QUERY = "initialQuery";
  @SerializedName(SERIALIZED_NAME_INITIAL_QUERY)
  private String initialQuery;

  public static final String SERIALIZED_NAME_SANITIZED_QUERY = "sanitizedQuery";
  @SerializedName(SERIALIZED_NAME_SANITIZED_QUERY)
  private String sanitizedQuery;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private SanitizedJqlQueryErrors errors;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public SanitizedJqlQuery() {
  }

  public SanitizedJqlQuery initialQuery(String initialQuery) {
    
    this.initialQuery = initialQuery;
    return this;
  }

   /**
   * The initial query.
   * @return initialQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The initial query.")

  public String getInitialQuery() {
    return initialQuery;
  }


  public void setInitialQuery(String initialQuery) {
    this.initialQuery = initialQuery;
  }


  public SanitizedJqlQuery sanitizedQuery(String sanitizedQuery) {
    
    this.sanitizedQuery = sanitizedQuery;
    return this;
  }

   /**
   * The sanitized query, if there were no errors.
   * @return sanitizedQuery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The sanitized query, if there were no errors.")

  public String getSanitizedQuery() {
    return sanitizedQuery;
  }


  public void setSanitizedQuery(String sanitizedQuery) {
    this.sanitizedQuery = sanitizedQuery;
  }


  public SanitizedJqlQuery errors(SanitizedJqlQueryErrors errors) {
    
    this.errors = errors;
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SanitizedJqlQueryErrors getErrors() {
    return errors;
  }


  public void setErrors(SanitizedJqlQueryErrors errors) {
    this.errors = errors;
  }


  public SanitizedJqlQuery accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * The account ID of the user for whom sanitization was performed.
   * @return accountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The account ID of the user for whom sanitization was performed.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SanitizedJqlQuery sanitizedJqlQuery = (SanitizedJqlQuery) o;
    return Objects.equals(this.initialQuery, sanitizedJqlQuery.initialQuery) &&
        Objects.equals(this.sanitizedQuery, sanitizedJqlQuery.sanitizedQuery) &&
        Objects.equals(this.errors, sanitizedJqlQuery.errors) &&
        Objects.equals(this.accountId, sanitizedJqlQuery.accountId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(initialQuery, sanitizedQuery, errors, accountId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SanitizedJqlQuery {\n");
    sb.append("    initialQuery: ").append(toIndentedString(initialQuery)).append("\n");
    sb.append("    sanitizedQuery: ").append(toIndentedString(sanitizedQuery)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("initialQuery");
    openapiFields.add("sanitizedQuery");
    openapiFields.add("errors");
    openapiFields.add("accountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SanitizedJqlQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SanitizedJqlQuery.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SanitizedJqlQuery is not found in the empty JSON string", SanitizedJqlQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SanitizedJqlQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SanitizedJqlQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("initialQuery") != null && !jsonObj.get("initialQuery").isJsonNull()) && !jsonObj.get("initialQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialQuery").toString()));
      }
      if ((jsonObj.get("sanitizedQuery") != null && !jsonObj.get("sanitizedQuery").isJsonNull()) && !jsonObj.get("sanitizedQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sanitizedQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sanitizedQuery").toString()));
      }
      // validate the optional field `errors`
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        SanitizedJqlQueryErrors.validateJsonObject(jsonObj.getAsJsonObject("errors"));
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SanitizedJqlQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SanitizedJqlQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SanitizedJqlQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SanitizedJqlQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<SanitizedJqlQuery>() {
           @Override
           public void write(JsonWriter out, SanitizedJqlQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SanitizedJqlQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SanitizedJqlQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SanitizedJqlQuery
  * @throws IOException if the JSON string is invalid with respect to SanitizedJqlQuery
  */
  public static SanitizedJqlQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SanitizedJqlQuery.class);
  }

 /**
  * Convert an instance of SanitizedJqlQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

