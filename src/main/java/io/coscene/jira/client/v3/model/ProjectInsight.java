/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.coscene.jira.client.v3.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;

import io.coscene.jira.client.v3.JSON;

/**
 * Insights about the project.
 */
@ApiModel(description = "Insights about the project.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-31T17:36:49.012380+08:00[Asia/Shanghai]")
public class ProjectInsight {
  public static final String SERIALIZED_NAME_TOTAL_ISSUE_COUNT = "totalIssueCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_ISSUE_COUNT)
  private Long totalIssueCount;

  public static final String SERIALIZED_NAME_LAST_ISSUE_UPDATE_TIME = "lastIssueUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_ISSUE_UPDATE_TIME)
  private OffsetDateTime lastIssueUpdateTime;

  public ProjectInsight() {
  }

  
  public ProjectInsight(
     Long totalIssueCount, 
     OffsetDateTime lastIssueUpdateTime
  ) {
    this();
    this.totalIssueCount = totalIssueCount;
    this.lastIssueUpdateTime = lastIssueUpdateTime;
  }

   /**
   * Total issue count.
   * @return totalIssueCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total issue count.")

  public Long getTotalIssueCount() {
    return totalIssueCount;
  }




   /**
   * The last issue update time.
   * @return lastIssueUpdateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last issue update time.")

  public OffsetDateTime getLastIssueUpdateTime() {
    return lastIssueUpdateTime;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectInsight projectInsight = (ProjectInsight) o;
    return Objects.equals(this.totalIssueCount, projectInsight.totalIssueCount) &&
        Objects.equals(this.lastIssueUpdateTime, projectInsight.lastIssueUpdateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalIssueCount, lastIssueUpdateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectInsight {\n");
    sb.append("    totalIssueCount: ").append(toIndentedString(totalIssueCount)).append("\n");
    sb.append("    lastIssueUpdateTime: ").append(toIndentedString(lastIssueUpdateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("totalIssueCount");
    openapiFields.add("lastIssueUpdateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProjectInsight
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ProjectInsight.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectInsight is not found in the empty JSON string", ProjectInsight.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProjectInsight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectInsight` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectInsight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectInsight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectInsight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectInsight.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectInsight>() {
           @Override
           public void write(JsonWriter out, ProjectInsight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectInsight read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProjectInsight given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProjectInsight
  * @throws IOException if the JSON string is invalid with respect to ProjectInsight
  */
  public static ProjectInsight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectInsight.class);
  }

 /**
  * Convert an instance of ProjectInsight to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

